name: CI → TEST (build & redeploy via SSH)

on:
  push:
    branches: [ main ]
  workflow_dispatch: {}

jobs:
  build-and-push:
    runs-on: ubuntu-latest
    permissions:
      packages: write
      contents: read
    outputs:
      image: ${{ steps.prep.outputs.image }}

    steps:
      - uses: actions/checkout@v4

      - uses: docker/setup-buildx-action@v3

      # Calcula el nombre de la imagen (todo en minúsculas)
      - name: Compose image name (lowercase)
        id: prep
        shell: bash
        run: |
          OWNER="${GITHUB_REPOSITORY_OWNER,,}"
          REPO="$(basename "$GITHUB_REPOSITORY" | tr '[:upper:]' '[:lower:]')"
          IMAGE="ghcr.io/${OWNER}/${REPO}-lawapp"
          echo "image=${IMAGE}" >> "$GITHUB_OUTPUT"
          echo "Usando imagen: ${IMAGE}"

      - name: Login to GHCR (push with GITHUB_TOKEN)
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      # Debug útil (verifica que existan los archivos en raíz)
      - name: Debug - lista archivos
        run: |
          pwd
          ls -la
          echo '--- head Dockerfile ---'
          sed -n '1,60p' ./Dockerfile || true

      - name: Build & Push (test-latest + sha)
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./Dockerfile          # <<<< ahora en la RAÍZ
          build-args: |
            NG_ENV=production
          push: true
          tags: |
            ${{ steps.prep.outputs.image }}:test-latest
            ${{ steps.prep.outputs.image }}:test-${{ github.sha }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

  redeploy-on-vps:
    needs: build-and-push
    runs-on: ubuntu-latest
    steps:
      - name: SSH redeploy (Swarm)
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.VPS_HOST }}
          username: ${{ secrets.VPS_USER }}
          key: ${{ secrets.VPS_SSH_KEY }}
          script_stop: true
          script: |
            set -e
            SERVICE="app-dev_app_test"
            IMAGE="${{ needs.build-and-push.outputs.image }}:test-latest"

            # Si tu imagen en GHCR es privada, descomenta login con PAT:
            # echo "${{ secrets.GHCR_TOKEN }}" | docker login ghcr.io -u "${{ secrets.GHCR_USERNAME }}" --password-stdin

            docker service update \
              --with-registry-auth \
              --image "$IMAGE" \
              --force "$SERVICE"

            docker service ps "$SERVICE" --no-trunc
